# -*- coding: utf-8 -*-
"""Teste python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RxCP9FkwXBkePYrebrsOq-WMFPSkQumk
"""

#importação da biblioteca para operações matemáticas
import math
import numpy as np
import operator

"""Questão 1"""

pares = []
divisores =[]

#intervalo do enunciado
intervalo = np.arange(1, 5000000, 1) 

#condição estabelecida no enunciado
for i in intervalo:
 if (i)%2 ==0:
  pares.append(i)

for j in pares:
  if j%(37*49)==0:
    divisores.append(j)

print("o numero de divisores pares no intervalo é: ",len(divisores))

"""Questão 2"""

#importação da biblioteca para operações matemáticas
import math

#vetor nulo com 10 posições
v = np.empty(10)

#Condição estabelecida no enunciado
for i in range(len(v)):
    if i%2 == 0: #para numeros pares
      x = 3**i + 7*math.factorial(i)
      v[i] = x
    else: #para numeros impares
      x = 2**i + 4*np.log(i)
      v[i] = x

posição = list(v).index(max(v)) #posição do maior vetor 
media = sum(v)/10

print("O vetor é igual a:")
print(v)

print("\nmédia dos valores dos elementos do vetor: %.2f" % media)
print("A posição do maior elemento é: ", posição)

"""Questão 3"""

#dicionario
notas={'aluno1':float(input("nota do aluno1: ")),
       'aluno2':float(input("nota do aluno2: ")),
       'aluno3':float(input("nota do aluno3: ")),
       'aluno4':float(input("nota do aluno4: ")),
       'aluno5':float(input("nota do aluno5: "))}

#encontrar maior nota                                     
maior_nota= notas[max(notas, key=notas.get)]
#encontrar aluno com maior nota
aluno_maior = max(notas.items(), key=operator.itemgetter(1))[0]

print("\nAluno com a maior nota:", aluno_maior)
print("Maior nota:", maior_nota)